/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n          query GetLabel($name: String!) {\n            repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n              id\n              name\n              labels(query: $name, first: 1) {\n                nodes {\n                  id\n                  name\n                }\n              }\n            }\n          }": types.GetLabelDocument,
    "\n          query GetDiscussionComments($discussionNumber: Int!) {\n            repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n              name\n              discussion(number: $discussionNumber) {\n                comments(first: 100) {\n                  nodes {\n                    author {\n                      login\n                    }\n                    id\n                    body\n                  }\n                }\n              }\n            }\n          }": types.GetDiscussionCommentsDocument,
    "\nquery GetPRForSHA1($query: String!) {\n  search(query: $query, first: 1, type: ISSUE) {\n    nodes {\n      ... on PullRequest {\n        title\n        number\n        closed\n      }\n    }\n  }\n}": types.GetPrForSha1Document,
    "\nquery GetAllOpenPRsAndCardIDs($endCursor: String) {\n  repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n    id\n    pullRequests(states: OPEN, orderBy: { field: UPDATED_AT, direction: DESC }, first: 100, after: $endCursor) {\n      nodes {\n        number\n        projectCards(first: 100) { nodes { id } }\n      }\n      pageInfo { hasNextPage endCursor }\n    }\n  }\n}": types.GetAllOpenPRsAndCardIDsDocument,
    "\n            query CardIdToPr($id: ID!) {\n                node(id: $id) {\n                    ... on ProjectCard { content { ... on PullRequest { state number } } }\n                }\n            }": types.CardIdToPrDocument,
    "\n  query GetFileContent($owner: String!, $name: String!, $expr: String!) {\n    repository(owner: $owner, name: $name) {\n      id\n      object(expression: $expr) {\n        ... on Blob {\n          text\n          byteSize\n        }\n      }\n    }\n  }": types.GetFileContentDocument,
    "\nquery GetLabels($endCursor: String) {\n  repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n    id\n    labels(first: 100, after: $endCursor) {\n      nodes {\n        id\n        name\n      }\n      pageInfo { hasNextPage endCursor }\n    }\n  }\n}": types.GetLabelsDocument,
    "\nquery GetProjectColumns {\n  repository(name:\"DefinitelyTyped\", owner:\"DefinitelyTyped\") {\n    id\n    project(number: 5) {\n      id\n      columns(first: 30) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}": types.GetProjectColumnsDocument,
    "\nquery PR($prNumber: Int!) {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      id\n      pullRequest(number: $prNumber) {\n        id\n        title\n        createdAt\n        author {\n          login\n        }\n        authorAssociation\n        baseRef {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        isDraft\n        mergeable\n        number\n        state\n        headRefOid\n        changedFiles\n        additions\n        deletions\n\n        commitIds: commits(last: 100) { nodes { commit { oid parents(first: 3) { nodes { oid }}}}}\n\n        timelineItems(last: 200, itemTypes: [REOPENED_EVENT, READY_FOR_REVIEW_EVENT,\n                                             MOVED_COLUMNS_IN_PROJECT_EVENT]) {\n          nodes {\n            ... on ReopenedEvent {\n              createdAt\n            }\n            ... on ReadyForReviewEvent {\n              createdAt\n            }\n            ... on MovedColumnsInProjectEvent {\n              actor { login }\n              createdAt\n              projectColumnName\n            }\n          }\n        }\n\n        reviews(last: 100) {\n          nodes {\n            author {\n              login\n            }\n            commit {\n              oid\n            }\n            comments(last: 10) {\n              nodes {\n                author {\n                  login\n                }\n                createdAt\n              }\n            }\n            authorAssociation\n            state\n            submittedAt\n            url\n          }\n        }\n\n        commits(last: 1) {\n          totalCount\n          nodes {\n            commit {\n              checkSuites(first: 100) {\n                nodes {\n                  databaseId\n                  app {\n                    name\n                  }\n                  conclusion\n                  resourcePath\n                  status\n                  url\n                  checkRuns(last: 1) {\n                    nodes {\n                      title\n                    }\n                  }\n                  createdAt\n                  workflowRun {\n                    file {\n                      path\n                    }\n                  }\n                }\n              }\n              status {\n                state\n                contexts {\n                  state\n                  description\n                  creator { login }\n                  targetUrl\n                }\n              }\n              authoredDate\n              committedDate\n              pushedDate\n              oid\n            }\n          }\n        }\n\n        comments(last: 100) {\n          totalCount\n          nodes {\n            id\n            author {\n              login\n            }\n            databaseId\n            body\n            createdAt\n            reactions(first: 100, content: THUMBS_UP) {\n              nodes {\n                user { login }\n              }\n            }\n          }\n        }\n\n        files(first: 100) {\n          totalCount\n          nodes {\n            path\n            additions\n            deletions\n          }\n          pageInfo { hasNextPage endCursor }\n        }\n\n        projectCards(first: 10) {\n          nodes {\n            id\n            project {\n              id\n              number\n              name\n            }\n            column {\n              id\n              name\n            }\n          }\n        }\n\n      }\n    }\n  }\n": types.PrDocument,
    "\nquery PRFiles($prNumber: Int!, $endCursor: String) {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      pullRequest(number: $prNumber) {\n        files(first: 100, after: $endCursor) {\n          totalCount\n          nodes {\n            path\n            additions\n            deletions\n          }\n          pageInfo { hasNextPage endCursor }\n        }\n      }\n    }\n  }\n": types.PrFilesDocument,
    "\n  query GetProjectBoardCards {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      id\n      project(number: 5) {\n        id\n        columns(first: 100) {\n          nodes {\n            id\n            name\n            cards(last: 100) {\n              totalCount\n              nodes {\n                id\n                updatedAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }": types.GetProjectBoardCardsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n          query GetLabel($name: String!) {\n            repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n              id\n              name\n              labels(query: $name, first: 1) {\n                nodes {\n                  id\n                  name\n                }\n              }\n            }\n          }"): (typeof documents)["\n          query GetLabel($name: String!) {\n            repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n              id\n              name\n              labels(query: $name, first: 1) {\n                nodes {\n                  id\n                  name\n                }\n              }\n            }\n          }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n          query GetDiscussionComments($discussionNumber: Int!) {\n            repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n              name\n              discussion(number: $discussionNumber) {\n                comments(first: 100) {\n                  nodes {\n                    author {\n                      login\n                    }\n                    id\n                    body\n                  }\n                }\n              }\n            }\n          }"): (typeof documents)["\n          query GetDiscussionComments($discussionNumber: Int!) {\n            repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n              name\n              discussion(number: $discussionNumber) {\n                comments(first: 100) {\n                  nodes {\n                    author {\n                      login\n                    }\n                    id\n                    body\n                  }\n                }\n              }\n            }\n          }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetPRForSHA1($query: String!) {\n  search(query: $query, first: 1, type: ISSUE) {\n    nodes {\n      ... on PullRequest {\n        title\n        number\n        closed\n      }\n    }\n  }\n}"): (typeof documents)["\nquery GetPRForSHA1($query: String!) {\n  search(query: $query, first: 1, type: ISSUE) {\n    nodes {\n      ... on PullRequest {\n        title\n        number\n        closed\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetAllOpenPRsAndCardIDs($endCursor: String) {\n  repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n    id\n    pullRequests(states: OPEN, orderBy: { field: UPDATED_AT, direction: DESC }, first: 100, after: $endCursor) {\n      nodes {\n        number\n        projectCards(first: 100) { nodes { id } }\n      }\n      pageInfo { hasNextPage endCursor }\n    }\n  }\n}"): (typeof documents)["\nquery GetAllOpenPRsAndCardIDs($endCursor: String) {\n  repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n    id\n    pullRequests(states: OPEN, orderBy: { field: UPDATED_AT, direction: DESC }, first: 100, after: $endCursor) {\n      nodes {\n        number\n        projectCards(first: 100) { nodes { id } }\n      }\n      pageInfo { hasNextPage endCursor }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n            query CardIdToPr($id: ID!) {\n                node(id: $id) {\n                    ... on ProjectCard { content { ... on PullRequest { state number } } }\n                }\n            }"): (typeof documents)["\n            query CardIdToPr($id: ID!) {\n                node(id: $id) {\n                    ... on ProjectCard { content { ... on PullRequest { state number } } }\n                }\n            }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFileContent($owner: String!, $name: String!, $expr: String!) {\n    repository(owner: $owner, name: $name) {\n      id\n      object(expression: $expr) {\n        ... on Blob {\n          text\n          byteSize\n        }\n      }\n    }\n  }"): (typeof documents)["\n  query GetFileContent($owner: String!, $name: String!, $expr: String!) {\n    repository(owner: $owner, name: $name) {\n      id\n      object(expression: $expr) {\n        ... on Blob {\n          text\n          byteSize\n        }\n      }\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetLabels($endCursor: String) {\n  repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n    id\n    labels(first: 100, after: $endCursor) {\n      nodes {\n        id\n        name\n      }\n      pageInfo { hasNextPage endCursor }\n    }\n  }\n}"): (typeof documents)["\nquery GetLabels($endCursor: String) {\n  repository(name: \"DefinitelyTyped\", owner: \"DefinitelyTyped\") {\n    id\n    labels(first: 100, after: $endCursor) {\n      nodes {\n        id\n        name\n      }\n      pageInfo { hasNextPage endCursor }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetProjectColumns {\n  repository(name:\"DefinitelyTyped\", owner:\"DefinitelyTyped\") {\n    id\n    project(number: 5) {\n      id\n      columns(first: 30) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery GetProjectColumns {\n  repository(name:\"DefinitelyTyped\", owner:\"DefinitelyTyped\") {\n    id\n    project(number: 5) {\n      id\n      columns(first: 30) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery PR($prNumber: Int!) {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      id\n      pullRequest(number: $prNumber) {\n        id\n        title\n        createdAt\n        author {\n          login\n        }\n        authorAssociation\n        baseRef {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        isDraft\n        mergeable\n        number\n        state\n        headRefOid\n        changedFiles\n        additions\n        deletions\n\n        commitIds: commits(last: 100) { nodes { commit { oid parents(first: 3) { nodes { oid }}}}}\n\n        timelineItems(last: 200, itemTypes: [REOPENED_EVENT, READY_FOR_REVIEW_EVENT,\n                                             MOVED_COLUMNS_IN_PROJECT_EVENT]) {\n          nodes {\n            ... on ReopenedEvent {\n              createdAt\n            }\n            ... on ReadyForReviewEvent {\n              createdAt\n            }\n            ... on MovedColumnsInProjectEvent {\n              actor { login }\n              createdAt\n              projectColumnName\n            }\n          }\n        }\n\n        reviews(last: 100) {\n          nodes {\n            author {\n              login\n            }\n            commit {\n              oid\n            }\n            comments(last: 10) {\n              nodes {\n                author {\n                  login\n                }\n                createdAt\n              }\n            }\n            authorAssociation\n            state\n            submittedAt\n            url\n          }\n        }\n\n        commits(last: 1) {\n          totalCount\n          nodes {\n            commit {\n              checkSuites(first: 100) {\n                nodes {\n                  databaseId\n                  app {\n                    name\n                  }\n                  conclusion\n                  resourcePath\n                  status\n                  url\n                  checkRuns(last: 1) {\n                    nodes {\n                      title\n                    }\n                  }\n                  createdAt\n                  workflowRun {\n                    file {\n                      path\n                    }\n                  }\n                }\n              }\n              status {\n                state\n                contexts {\n                  state\n                  description\n                  creator { login }\n                  targetUrl\n                }\n              }\n              authoredDate\n              committedDate\n              pushedDate\n              oid\n            }\n          }\n        }\n\n        comments(last: 100) {\n          totalCount\n          nodes {\n            id\n            author {\n              login\n            }\n            databaseId\n            body\n            createdAt\n            reactions(first: 100, content: THUMBS_UP) {\n              nodes {\n                user { login }\n              }\n            }\n          }\n        }\n\n        files(first: 100) {\n          totalCount\n          nodes {\n            path\n            additions\n            deletions\n          }\n          pageInfo { hasNextPage endCursor }\n        }\n\n        projectCards(first: 10) {\n          nodes {\n            id\n            project {\n              id\n              number\n              name\n            }\n            column {\n              id\n              name\n            }\n          }\n        }\n\n      }\n    }\n  }\n"): (typeof documents)["\nquery PR($prNumber: Int!) {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      id\n      pullRequest(number: $prNumber) {\n        id\n        title\n        createdAt\n        author {\n          login\n        }\n        authorAssociation\n        baseRef {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        isDraft\n        mergeable\n        number\n        state\n        headRefOid\n        changedFiles\n        additions\n        deletions\n\n        commitIds: commits(last: 100) { nodes { commit { oid parents(first: 3) { nodes { oid }}}}}\n\n        timelineItems(last: 200, itemTypes: [REOPENED_EVENT, READY_FOR_REVIEW_EVENT,\n                                             MOVED_COLUMNS_IN_PROJECT_EVENT]) {\n          nodes {\n            ... on ReopenedEvent {\n              createdAt\n            }\n            ... on ReadyForReviewEvent {\n              createdAt\n            }\n            ... on MovedColumnsInProjectEvent {\n              actor { login }\n              createdAt\n              projectColumnName\n            }\n          }\n        }\n\n        reviews(last: 100) {\n          nodes {\n            author {\n              login\n            }\n            commit {\n              oid\n            }\n            comments(last: 10) {\n              nodes {\n                author {\n                  login\n                }\n                createdAt\n              }\n            }\n            authorAssociation\n            state\n            submittedAt\n            url\n          }\n        }\n\n        commits(last: 1) {\n          totalCount\n          nodes {\n            commit {\n              checkSuites(first: 100) {\n                nodes {\n                  databaseId\n                  app {\n                    name\n                  }\n                  conclusion\n                  resourcePath\n                  status\n                  url\n                  checkRuns(last: 1) {\n                    nodes {\n                      title\n                    }\n                  }\n                  createdAt\n                  workflowRun {\n                    file {\n                      path\n                    }\n                  }\n                }\n              }\n              status {\n                state\n                contexts {\n                  state\n                  description\n                  creator { login }\n                  targetUrl\n                }\n              }\n              authoredDate\n              committedDate\n              pushedDate\n              oid\n            }\n          }\n        }\n\n        comments(last: 100) {\n          totalCount\n          nodes {\n            id\n            author {\n              login\n            }\n            databaseId\n            body\n            createdAt\n            reactions(first: 100, content: THUMBS_UP) {\n              nodes {\n                user { login }\n              }\n            }\n          }\n        }\n\n        files(first: 100) {\n          totalCount\n          nodes {\n            path\n            additions\n            deletions\n          }\n          pageInfo { hasNextPage endCursor }\n        }\n\n        projectCards(first: 10) {\n          nodes {\n            id\n            project {\n              id\n              number\n              name\n            }\n            column {\n              id\n              name\n            }\n          }\n        }\n\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery PRFiles($prNumber: Int!, $endCursor: String) {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      pullRequest(number: $prNumber) {\n        files(first: 100, after: $endCursor) {\n          totalCount\n          nodes {\n            path\n            additions\n            deletions\n          }\n          pageInfo { hasNextPage endCursor }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery PRFiles($prNumber: Int!, $endCursor: String) {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      pullRequest(number: $prNumber) {\n        files(first: 100, after: $endCursor) {\n          totalCount\n          nodes {\n            path\n            additions\n            deletions\n          }\n          pageInfo { hasNextPage endCursor }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProjectBoardCards {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      id\n      project(number: 5) {\n        id\n        columns(first: 100) {\n          nodes {\n            id\n            name\n            cards(last: 100) {\n              totalCount\n              nodes {\n                id\n                updatedAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }"): (typeof documents)["\n  query GetProjectBoardCards {\n    repository(owner: \"DefinitelyTyped\", name: \"DefinitelyTyped\") {\n      id\n      project(number: 5) {\n        id\n        columns(first: 100) {\n          nodes {\n            id\n            name\n            cards(last: 100) {\n              totalCount\n              nodes {\n                id\n                updatedAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;